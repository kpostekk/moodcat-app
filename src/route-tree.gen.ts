/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutPLayoutImport } from './routes/_layout/p/_layout'

// Create Virtual Routes

const PlaygroundLazyImport = createFileRoute('/playground')()
const ManagerLazyImport = createFileRoute('/manager')()
const IndexLazyImport = createFileRoute('/')()
const LayoutPImport = createFileRoute('/_layout/p')()
const LayoutLoginLazyImport = createFileRoute('/_layout/login')()
const LayoutTIndexLazyImport = createFileRoute('/_layout/t/')()
const LayoutPLayoutIndexLazyImport = createFileRoute('/_layout/p/_layout/')()

// Create/Update Routes

const PlaygroundLazyRoute = PlaygroundLazyImport.update({
  path: '/playground',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/playground.lazy').then((d) => d.Route))

const ManagerLazyRoute = ManagerLazyImport.update({
  path: '/manager',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/manager.lazy').then((d) => d.Route))

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const LayoutPRoute = LayoutPImport.update({
  path: '/p',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutLoginLazyRoute = LayoutLoginLazyImport.update({
  path: '/login',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() => import('./routes/_layout/login.lazy').then((d) => d.Route))

const LayoutTIndexLazyRoute = LayoutTIndexLazyImport.update({
  path: '/t/',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() =>
  import('./routes/_layout/t/index.lazy').then((d) => d.Route),
)

const LayoutPLayoutRoute = LayoutPLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => LayoutPRoute,
} as any)

const LayoutPLayoutIndexLazyRoute = LayoutPLayoutIndexLazyImport.update({
  path: '/',
  getParentRoute: () => LayoutPLayoutRoute,
} as any).lazy(() =>
  import('./routes/_layout/p/_layout/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/manager': {
      id: '/manager'
      path: '/manager'
      fullPath: '/manager'
      preLoaderRoute: typeof ManagerLazyImport
      parentRoute: typeof rootRoute
    }
    '/playground': {
      id: '/playground'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundLazyImport
      parentRoute: typeof rootRoute
    }
    '/_layout/login': {
      id: '/_layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LayoutLoginLazyImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/p': {
      id: '/_layout/p'
      path: '/p'
      fullPath: '/p'
      preLoaderRoute: typeof LayoutPImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/p/_layout': {
      id: '/_layout/p/_layout'
      path: '/p'
      fullPath: '/p'
      preLoaderRoute: typeof LayoutPLayoutImport
      parentRoute: typeof LayoutPRoute
    }
    '/_layout/t/': {
      id: '/_layout/t/'
      path: '/t'
      fullPath: '/t'
      preLoaderRoute: typeof LayoutTIndexLazyImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/p/_layout/': {
      id: '/_layout/p/_layout/'
      path: '/'
      fullPath: '/p/'
      preLoaderRoute: typeof LayoutPLayoutIndexLazyImport
      parentRoute: typeof LayoutPLayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutPLayoutRouteChildren {
  LayoutPLayoutIndexLazyRoute: typeof LayoutPLayoutIndexLazyRoute
}

const LayoutPLayoutRouteChildren: LayoutPLayoutRouteChildren = {
  LayoutPLayoutIndexLazyRoute: LayoutPLayoutIndexLazyRoute,
}

const LayoutPLayoutRouteWithChildren = LayoutPLayoutRoute._addFileChildren(
  LayoutPLayoutRouteChildren,
)

interface LayoutPRouteChildren {
  LayoutPLayoutRoute: typeof LayoutPLayoutRouteWithChildren
}

const LayoutPRouteChildren: LayoutPRouteChildren = {
  LayoutPLayoutRoute: LayoutPLayoutRouteWithChildren,
}

const LayoutPRouteWithChildren =
  LayoutPRoute._addFileChildren(LayoutPRouteChildren)

interface LayoutRouteChildren {
  LayoutLoginLazyRoute: typeof LayoutLoginLazyRoute
  LayoutPRoute: typeof LayoutPRouteWithChildren
  LayoutTIndexLazyRoute: typeof LayoutTIndexLazyRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutLoginLazyRoute: LayoutLoginLazyRoute,
  LayoutPRoute: LayoutPRouteWithChildren,
  LayoutTIndexLazyRoute: LayoutTIndexLazyRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof LayoutRouteWithChildren
  '/manager': typeof ManagerLazyRoute
  '/playground': typeof PlaygroundLazyRoute
  '/login': typeof LayoutLoginLazyRoute
  '/p': typeof LayoutPLayoutRouteWithChildren
  '/t': typeof LayoutTIndexLazyRoute
  '/p/': typeof LayoutPLayoutIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof LayoutRouteWithChildren
  '/manager': typeof ManagerLazyRoute
  '/playground': typeof PlaygroundLazyRoute
  '/login': typeof LayoutLoginLazyRoute
  '/p': typeof LayoutPLayoutIndexLazyRoute
  '/t': typeof LayoutTIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/manager': typeof ManagerLazyRoute
  '/playground': typeof PlaygroundLazyRoute
  '/_layout/login': typeof LayoutLoginLazyRoute
  '/_layout/p': typeof LayoutPRouteWithChildren
  '/_layout/p/_layout': typeof LayoutPLayoutRouteWithChildren
  '/_layout/t/': typeof LayoutTIndexLazyRoute
  '/_layout/p/_layout/': typeof LayoutPLayoutIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/manager'
    | '/playground'
    | '/login'
    | '/p'
    | '/t'
    | '/p/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/manager' | '/playground' | '/login' | '/p' | '/t'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/manager'
    | '/playground'
    | '/_layout/login'
    | '/_layout/p'
    | '/_layout/p/_layout'
    | '/_layout/t/'
    | '/_layout/p/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  ManagerLazyRoute: typeof ManagerLazyRoute
  PlaygroundLazyRoute: typeof PlaygroundLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LayoutRoute: LayoutRouteWithChildren,
  ManagerLazyRoute: ManagerLazyRoute,
  PlaygroundLazyRoute: PlaygroundLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/manager",
        "/playground"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/login",
        "/_layout/p",
        "/_layout/t/"
      ]
    },
    "/manager": {
      "filePath": "manager.lazy.tsx"
    },
    "/playground": {
      "filePath": "playground.lazy.tsx"
    },
    "/_layout/login": {
      "filePath": "_layout/login.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/p": {
      "filePath": "_layout/p",
      "parent": "/_layout",
      "children": [
        "/_layout/p/_layout"
      ]
    },
    "/_layout/p/_layout": {
      "filePath": "_layout/p/_layout.tsx",
      "parent": "/_layout/p",
      "children": [
        "/_layout/p/_layout/"
      ]
    },
    "/_layout/t/": {
      "filePath": "_layout/t/index.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/p/_layout/": {
      "filePath": "_layout/p/_layout/index.lazy.tsx",
      "parent": "/_layout/p/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
